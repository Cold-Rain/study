'''
Вы работаете в агентстве недвижимости и вам необходимо разработать программу для управления объектами недвижимости,
такими как дома, квартиры и земельные участки.
Вам нужно создать классы, которые будут представлять разные типы объектов недвижимости, а также класс агентства, который будет отвечать за управление списком доступных объектов.
Базовый класс SellItem:
Инициализатор, который устанавливает локальные свойства:
name: строка;
price: целое или дробное число;
Дочерний класс House класса SellItem:
Инициализатор, который устанавливает локальные свойства:
name: строка (установка должна осуществляться инициализатором базового класса);
price: целое или дробное число (установка должна осуществляться инициализатором базового класса);
material: строка;
square: целое или дробное число.
Дочерний класс Flat класса SellItem:

Инициализатор, который устанавливает локальные свойства:
name: строка (установка должна осуществляться инициализатором базового класса)
price: целое или дробное число (установка должна осуществляться инициализатором базового класса)
size: целое или дробное число
square: целое или дробное число
Класс Agency:

Инициализатор, который устанавливает локальные свойства:
name: строка
objs: пустой список (не передаётся в качестве аргумента инициализатору)
Метод add_object() добавляет переданный объект в список objs
Метод remove_object() удаляет переданный объект из списка objs
Метод get_objects() возвращает свойство objs
'''


# Базовый класс для всех объектов недвижимости
class SellItem:
    # Инициализатор класса, принимает имя и цену объекта
    def __init__(self, name: str, price):
        self.name = name  # Устанавливаем имя объекта
        self.price = price  # Устанавливаем цену объекта

# Дочерний класс для домов, наследуется от SellItem
class House(SellItem):
    # Инициализатор класса, принимает имя, цену, материал и площадь дома
    def __init__(self, name: str, price, material: str, square):
        super().__init__(name, price)  # Вызываем инициализатор базового класса
        self.material = material  # Устанавливаем материал дома
        self.square = square  # Устанавливаем площадь дома

# Дочерний класс для квартир, наследуется от SellItem
class Flat(SellItem):
    # Инициализатор класса, принимает имя, цену, размер и количество комнат
    def __init__(self, name: str, price, size, rooms):
        super().__init__(name, price)  # Вызываем инициализатор базового класса
        self.size = size  # Устанавливаем размер квартиры
        self.rooms = rooms  # Устанавливаем количество комнат в квартире

# Класс для агентства недвижимости
class Agency:
    # Инициализатор класса, принимает имя агентства
    def __init__(self, name: str):
        self.name = name  # Устанавливаем имя агентства
        self.objs = []  # Инициализируем пустой список объектов недвижимости

    # Метод для добавления объекта в список
    def add_object(self, obj):
        self.objs.append(obj)  # Добавляем объект в список

    # Метод для удаления объекта из списка
    def remove_object(self, obj):
        if obj in self.objs:  # Проверяем, есть ли объект в списке
            self.objs.remove(obj)  # Удаляем объект из списка

    # Метод для получения списка объектов
    def get_objects(self):
        return self.objs  # Возвращаем список объектов

# Пример использования:

# Создаем объекты недвижимости
house1 = House("Большой дом", 500000, "кирпич", 200)
flat1 = Flat("Уютная квартира", 200000, 70, 3)

# Создаем агентство
agency = Agency("Мое агентство")

# Добавляем объекты в агентство
agency.add_object(house1)
agency.add_object(flat1)

# Получаем список объектов в агентстве
print("Объекты в агентстве:")
for obj in agency.get_objects():
    print(f"Название: {obj.name}, Цена: {obj.price}")

# Удаляем объект из агентства
agency.remove_object(house1)

# Получаем обновленный список объектов в агентстве
print("\nОбъекты в агентстве после удаления:")
for obj in agency.get_objects():
    print(f"Название: {obj.name}, Цена: {obj.price}")








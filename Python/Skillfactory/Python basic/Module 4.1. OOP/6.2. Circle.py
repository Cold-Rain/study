'''
Представьте, что вы являетесь разработчиком в малом архитектурном бюро, специализирующемся на разработке круглых конструкций, таких как фонтаны, круглые парковые зоны или круглые здания. Вы часто работаете с различными дизайнерскими эскизами, и вам нужно быстро рассчитывать площади и диаметры кругов разного размера.

С помощью Python вы можете упростить этот процесс, создав класс Circle, который принимает радиус круга в качестве аргумента и позволяет вычислить его площадь и диаметр.

Инициализатор принимает радиус в качестве аргумента и устанавливает значение защищенного свойства radius.

Класс должен:

геттер и сеттер свойства radius, реализованные через декораторы @property и @radius.setter.
В сеттере свойства radius должна происходить проверка на то, что значение больше нуля, иначе должна вызываться ошибка ValueError("Radius cannot be negative").
Также добавьте геттер (также через декоратор) с именем area, который возвращает площадь круга. Напомним, площадь рассчитывается по формуле:
В качестве числа возьмите значение 3.14.
Также добавьте геттер (также через декоратор) с именем diameter, который возвращает диаметр круга (удвоенный радиус):
Пример использования класса:


# Создадим экземпляр класса Circle с радиусом 5
circle_1 = Circle(5)
print(f"Радиус круга: {circle_1.radius}")
print(f"Площадь круга: {circle_1.area}")
print(f"Диаметр круга: {circle_1.diameter}")


# Изменим радиус круга на 10
circle_1.radius = 10
print(f"Площадь круга после изменения радиуса: {circle_1.area}")
print(f"Диаметр круга после изменения радиуса: {circle_1.diameter}")


# Попробуем установить отрицательный радиус
try:
    circle_1.radius = -5
except ValueError as ve:
    print(ve)


# Радиус круга: 5
# Площадь круга: 78.5
# Диаметр круга: 10
# Площадь круга после изменения радиуса: 314.0
# Диаметр круга после изменения радиуса: 20
# Radius cannot be negative




# Создадим экземпляр класса Circle с радиусом 15 для другого проекта
circle_2 = Circle(15)
print(f"Радиус другого круга: {circle_2.radius}")
print(f"Площадь другого круга: {circle_2.area}")
print(f"Диаметр другого круга: {circle_2.diameter}")


# Радиус другого круга: 15
# Площадь другого круга: 706.5
# Диаметр другого круга: 30
'''

class Circle:
    PI = 3.14  # Константа для числа Пи

    def __init__(self, radius):
        # Инициализация защищенного свойства radius
        self._radius = radius

    @property
    def radius(self):
        # Геттер для свойства radius
        return self._radius

    @radius.setter
    def radius(self, value):
        # Сеттер для свойства radius с проверкой на положительное значение
        if value > 0:
            self._radius = value
        else:
            raise ValueError("Radius cannot be negative")

    @property
    def area(self):
        # Геттер для свойства area, возвращающий площадь круга
        return self.PI * (self._radius ** 2)

    @property
    def diameter(self):
        # Геттер для свойства diameter, возвращающий диаметр круга
        return 2 * self._radius



